{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coding 2.0 \u00b6 It contains topic-wise notes of the Data Structures & Algo and CKA .","title":"Home"},{"location":"#coding-20","text":"It contains topic-wise notes of the Data Structures & Algo and CKA .","title":"Coding 2.0"},{"location":"about/about/","text":"Coming Soon","title":"About"},{"location":"cka/contents/","text":"Coming Soon","title":"CKA"},{"location":"coding/contents/","text":"Topics \u00b6 Topic Description References Array It contains array problems Here Character Array It contains character array problems Here String It contains string problems Here","title":"contents"},{"location":"coding/contents/#topics","text":"Topic Description References Array It contains array problems Here Character Array It contains character array problems Here String It contains string problems Here","title":"Topics"},{"location":"coding/array/array/","text":"Introduction \u00b6 Array stores the continuous and homogenous data of the fixed size. It should be declared in the form of <data-type> <name>[<size>] i.e, int arr[10] Initialise \u00b6 int a[10] : It initialises all the array elements with garbage value int a[10]={5} : It initialises the first element by 5 and rest of the elements by 0 int a[10]={5,2} : It initialises the first element by 5, second element by 2, and rest of the elements by 0 Comparator \u00b6 Comparator function can be passed inside inbuild sort() function to sort the array based on the condition provided inside comparator function. sort the array based on last digit of each number \u00b6 bool comparator(int a, int b){ return b%10>a%10; } Pass the above function inside sort function. sort(a,a+n,comparator); Function As An Argument \u00b6 Functions can be passed as an argument to another function in cpp. The sort function accepts comparator function as an argument. Using function as an argument to print all the odd numbers present inside the given array View the code // print all the odd numbers in the array #include <bits/stdc++.h> using namespace std ; bool isOdd ( int a ){ return a & 1 ; } void printOddNumbers ( int a [], int n , bool ( & fun )( int a )){ for ( int i = 0 ; i < n ; i ++ ){ if ( fun ( a [ i ])){ cout << a [ i ] << \" \" ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; printOddNumbers ( a , n , isOdd ); }","title":"Introduction"},{"location":"coding/array/array/#introduction","text":"Array stores the continuous and homogenous data of the fixed size. It should be declared in the form of <data-type> <name>[<size>] i.e, int arr[10]","title":"Introduction"},{"location":"coding/array/array/#initialise","text":"int a[10] : It initialises all the array elements with garbage value int a[10]={5} : It initialises the first element by 5 and rest of the elements by 0 int a[10]={5,2} : It initialises the first element by 5, second element by 2, and rest of the elements by 0","title":"Initialise"},{"location":"coding/array/array/#comparator","text":"Comparator function can be passed inside inbuild sort() function to sort the array based on the condition provided inside comparator function.","title":"Comparator"},{"location":"coding/array/array/#sort-the-array-based-on-last-digit-of-each-number","text":"bool comparator(int a, int b){ return b%10>a%10; } Pass the above function inside sort function. sort(a,a+n,comparator);","title":"sort the array based on last digit of each number"},{"location":"coding/array/array/#function-as-an-argument","text":"Functions can be passed as an argument to another function in cpp. The sort function accepts comparator function as an argument. Using function as an argument to print all the odd numbers present inside the given array View the code // print all the odd numbers in the array #include <bits/stdc++.h> using namespace std ; bool isOdd ( int a ){ return a & 1 ; } void printOddNumbers ( int a [], int n , bool ( & fun )( int a )){ for ( int i = 0 ; i < n ; i ++ ){ if ( fun ( a [ i ])){ cout << a [ i ] << \" \" ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; printOddNumbers ( a , n , isOdd ); }","title":"Function As An Argument"},{"location":"coding/array/problems/","text":"Problems \u00b6 Searching Problems \u00b6 linear search binary search pair with given sum Sorting Problems \u00b6 selection sort bubble sort insertion sort SubArray Problems \u00b6 print all subarrays maximum sum subarray Searching \u00b6 Linear Search \u00b6 Search for the given element in the unsorted array View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ for ( int i = 0 ; i < n ; i ++ ){ if ( a [ i ] == x ) return i ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); } Binary Search \u00b6 Search for the given element in sorted array View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ int s = 0 ; int e = n -1 ; while ( s <= e ){ int m = ( s + e ) / 2 ; if ( a [ m ] == x ) return m ; else if ( a [ m ] > x ) e = m -1 ; else s = m + 1 ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); } Pair with given sum \u00b6 Find all the pairs with given sum View the code #include <bits/stdc++.h> using namespace std ; void search ( int a [], int n , int x ){ int l = 0 , r = n -1 ; while ( l < r ){ int val = a [ l ] + a [ r ]; if ( val == x ){ cout << a [ l ] << \" \" << a [ r ] << endl ; l ++ ; r -- ; } else if ( val > x ){ r -- ; } else { l ++ ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; search ( a , n , x ); } Sorting \u00b6 Selection Sort \u00b6 Sort the array using selection sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int min_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] < a [ min_element ]){ min_element = j ; } } int temp = a [ min_element ]; a [ min_element ] = a [ i ]; a [ i ] = temp ; } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int max_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] > a [ max_element ]){ max_element = j ; } } int temp = a [ max_element ]; a [ max_element ] = a [ i ]; a [ i ] = temp ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; } Bubble Sort \u00b6 Sort the array using bubble sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] > a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] < a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; } Insertion Sort \u00b6 Sort the array using insertion sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] > key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } void desc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] < key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; } Subarray \u00b6 Print all subarrays \u00b6 Print all the possible subarrays View the code #include <bits/stdc++.h> using namespace std ; void printSubarray ( int a [], int n ){ for ( int i = 0 ; i < n ; i ++ ){ for ( int j = i ; j < n ; j ++ ){ for ( int k = i ; k <= j ; k ++ ) cout << a [ k ] << \" \" ; cout << endl ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; printSubarray ( a , n ); } Maximum sum subarray \u00b6 Print the subarray with the maximum sum View the code #include <bits/stdc++.h> using namespace std ; void maxSumSubarray ( int a [], int n ){ int ms = 0 , cs = 0 , e = 0 , s = 0 ; for ( int i = 0 ; i < n ; i ++ ){ cs = max ( 0 , cs + a [ i ]); if ( cs > ms ){ ms = cs ; e = i ; } } int temp = ms ; s = e ; while ( s >= 0 ){ temp -= a [ s ]; if ( temp == 0 ) break ; s -- ; } cout << \"max sum\" << ms << endl ; for ( int i = s ; i <= e ; i ++ ) cout << a [ i ] << \" \" ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; maxSumSubarray ( a , n ); }","title":"Problems"},{"location":"coding/array/problems/#problems","text":"","title":"Problems"},{"location":"coding/array/problems/#searching-problems","text":"linear search binary search pair with given sum","title":"Searching Problems"},{"location":"coding/array/problems/#sorting-problems","text":"selection sort bubble sort insertion sort","title":"Sorting Problems"},{"location":"coding/array/problems/#subarray-problems","text":"print all subarrays maximum sum subarray","title":"SubArray Problems"},{"location":"coding/array/problems/#searching","text":"","title":"Searching"},{"location":"coding/array/problems/#linear-search","text":"Search for the given element in the unsorted array View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ for ( int i = 0 ; i < n ; i ++ ){ if ( a [ i ] == x ) return i ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); }","title":"Linear Search"},{"location":"coding/array/problems/#binary-search","text":"Search for the given element in sorted array View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ int s = 0 ; int e = n -1 ; while ( s <= e ){ int m = ( s + e ) / 2 ; if ( a [ m ] == x ) return m ; else if ( a [ m ] > x ) e = m -1 ; else s = m + 1 ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); }","title":"Binary Search"},{"location":"coding/array/problems/#pair-with-given-sum","text":"Find all the pairs with given sum View the code #include <bits/stdc++.h> using namespace std ; void search ( int a [], int n , int x ){ int l = 0 , r = n -1 ; while ( l < r ){ int val = a [ l ] + a [ r ]; if ( val == x ){ cout << a [ l ] << \" \" << a [ r ] << endl ; l ++ ; r -- ; } else if ( val > x ){ r -- ; } else { l ++ ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; search ( a , n , x ); }","title":"Pair with given sum"},{"location":"coding/array/problems/#sorting","text":"","title":"Sorting"},{"location":"coding/array/problems/#selection-sort","text":"Sort the array using selection sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int min_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] < a [ min_element ]){ min_element = j ; } } int temp = a [ min_element ]; a [ min_element ] = a [ i ]; a [ i ] = temp ; } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int max_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] > a [ max_element ]){ max_element = j ; } } int temp = a [ max_element ]; a [ max_element ] = a [ i ]; a [ i ] = temp ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Selection Sort"},{"location":"coding/array/problems/#bubble-sort","text":"Sort the array using bubble sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] > a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] < a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Bubble Sort"},{"location":"coding/array/problems/#insertion-sort","text":"Sort the array using insertion sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] > key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } void desc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] < key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Insertion Sort"},{"location":"coding/array/problems/#subarray","text":"","title":"Subarray"},{"location":"coding/array/problems/#print-all-subarrays","text":"Print all the possible subarrays View the code #include <bits/stdc++.h> using namespace std ; void printSubarray ( int a [], int n ){ for ( int i = 0 ; i < n ; i ++ ){ for ( int j = i ; j < n ; j ++ ){ for ( int k = i ; k <= j ; k ++ ) cout << a [ k ] << \" \" ; cout << endl ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; printSubarray ( a , n ); }","title":"Print all subarrays"},{"location":"coding/array/problems/#maximum-sum-subarray","text":"Print the subarray with the maximum sum View the code #include <bits/stdc++.h> using namespace std ; void maxSumSubarray ( int a [], int n ){ int ms = 0 , cs = 0 , e = 0 , s = 0 ; for ( int i = 0 ; i < n ; i ++ ){ cs = max ( 0 , cs + a [ i ]); if ( cs > ms ){ ms = cs ; e = i ; } } int temp = ms ; s = e ; while ( s >= 0 ){ temp -= a [ s ]; if ( temp == 0 ) break ; s -- ; } cout << \"max sum\" << ms << endl ; for ( int i = s ; i <= e ; i ++ ) cout << a [ i ] << \" \" ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; maxSumSubarray ( a , n ); }","title":"Maximum sum subarray"},{"location":"coding/array/searching/searching/","text":"Searching Problems \u00b6 linear search binary search pair with given sum Linear Search \u00b6 Search for the given element in the unsorted array View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ for ( int i = 0 ; i < n ; i ++ ){ if ( a [ i ] == x ) return i ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); } Binary Search \u00b6 Search for the given element in sorted array View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ int s = 0 ; int e = n -1 ; while ( s <= e ){ int m = ( s + e ) / 2 ; if ( a [ m ] == x ) return m ; else if ( a [ m ] > x ) e = m -1 ; else s = m + 1 ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); } Pair with given sum \u00b6 Find all the pairs with given sum View the code #include <bits/stdc++.h> using namespace std ; void search ( int a [], int n , int x ){ int l = 0 , r = n -1 ; while ( l < r ){ int val = a [ l ] + a [ r ]; if ( val == x ){ cout << a [ l ] << \" \" << a [ r ] << endl ; l ++ ; r -- ; } else if ( val > x ){ r -- ; } else { l ++ ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; search ( a , n , x ); }","title":"Searching Problems"},{"location":"coding/array/searching/searching/#searching-problems","text":"linear search binary search pair with given sum","title":"Searching Problems"},{"location":"coding/array/searching/searching/#linear-search","text":"Search for the given element in the unsorted array View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ for ( int i = 0 ; i < n ; i ++ ){ if ( a [ i ] == x ) return i ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); }","title":"Linear Search"},{"location":"coding/array/searching/searching/#binary-search","text":"Search for the given element in sorted array View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ int s = 0 ; int e = n -1 ; while ( s <= e ){ int m = ( s + e ) / 2 ; if ( a [ m ] == x ) return m ; else if ( a [ m ] > x ) e = m -1 ; else s = m + 1 ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); }","title":"Binary Search"},{"location":"coding/array/searching/searching/#pair-with-given-sum","text":"Find all the pairs with given sum View the code #include <bits/stdc++.h> using namespace std ; void search ( int a [], int n , int x ){ int l = 0 , r = n -1 ; while ( l < r ){ int val = a [ l ] + a [ r ]; if ( val == x ){ cout << a [ l ] << \" \" << a [ r ] << endl ; l ++ ; r -- ; } else if ( val > x ){ r -- ; } else { l ++ ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; search ( a , n , x ); }","title":"Pair with given sum"},{"location":"coding/array/sorting/sorting/","text":"Sorting Problems \u00b6 selection sort bubble sort insertion sort Selection Sort \u00b6 Sort the array using selection sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int min_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] < a [ min_element ]){ min_element = j ; } } int temp = a [ min_element ]; a [ min_element ] = a [ i ]; a [ i ] = temp ; } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int max_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] > a [ max_element ]){ max_element = j ; } } int temp = a [ max_element ]; a [ max_element ] = a [ i ]; a [ i ] = temp ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; } Bubble Sort \u00b6 Sort the array using bubble sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] > a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] < a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; } Insertion Sort \u00b6 Sort the array using insertion sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] > key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } void desc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] < key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Sorting Problems"},{"location":"coding/array/sorting/sorting/#sorting-problems","text":"selection sort bubble sort insertion sort","title":"Sorting Problems"},{"location":"coding/array/sorting/sorting/#selection-sort","text":"Sort the array using selection sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int min_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] < a [ min_element ]){ min_element = j ; } } int temp = a [ min_element ]; a [ min_element ] = a [ i ]; a [ i ] = temp ; } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int max_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] > a [ max_element ]){ max_element = j ; } } int temp = a [ max_element ]; a [ max_element ] = a [ i ]; a [ i ] = temp ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Selection Sort"},{"location":"coding/array/sorting/sorting/#bubble-sort","text":"Sort the array using bubble sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] > a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] < a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Bubble Sort"},{"location":"coding/array/sorting/sorting/#insertion-sort","text":"Sort the array using insertion sort View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] > key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } void desc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] < key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Insertion Sort"},{"location":"coding/array/sub-array/sub-array/","text":"SubArray Problems \u00b6 print all subarrays maximum sum subarray Print all subarrays \u00b6 Print all the possible subarrays View the code #include <bits/stdc++.h> using namespace std ; void printSubarray ( int a [], int n ){ for ( int i = 0 ; i < n ; i ++ ){ for ( int j = i ; j < n ; j ++ ){ for ( int k = i ; k <= j ; k ++ ) cout << a [ k ] << \" \" ; cout << endl ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; printSubarray ( a , n ); } Maximum sum subarray \u00b6 Print the subarray with the maximum sum View the code #include <bits/stdc++.h> using namespace std ; void maxSumSubarray ( int a [], int n ){ int ms = 0 , cs = 0 , e = 0 , s = 0 ; for ( int i = 0 ; i < n ; i ++ ){ cs = max ( 0 , cs + a [ i ]); if ( cs > ms ){ ms = cs ; e = i ; } } int temp = ms ; s = e ; while ( s >= 0 ){ temp -= a [ s ]; if ( temp == 0 ) break ; s -- ; } cout << \"max sum\" << ms << endl ; for ( int i = s ; i <= e ; i ++ ) cout << a [ i ] << \" \" ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; maxSumSubarray ( a , n ); }","title":"SubArray Problems"},{"location":"coding/array/sub-array/sub-array/#subarray-problems","text":"print all subarrays maximum sum subarray","title":"SubArray Problems"},{"location":"coding/array/sub-array/sub-array/#print-all-subarrays","text":"Print all the possible subarrays View the code #include <bits/stdc++.h> using namespace std ; void printSubarray ( int a [], int n ){ for ( int i = 0 ; i < n ; i ++ ){ for ( int j = i ; j < n ; j ++ ){ for ( int k = i ; k <= j ; k ++ ) cout << a [ k ] << \" \" ; cout << endl ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; printSubarray ( a , n ); }","title":"Print all subarrays"},{"location":"coding/array/sub-array/sub-array/#maximum-sum-subarray","text":"Print the subarray with the maximum sum View the code #include <bits/stdc++.h> using namespace std ; void maxSumSubarray ( int a [], int n ){ int ms = 0 , cs = 0 , e = 0 , s = 0 ; for ( int i = 0 ; i < n ; i ++ ){ cs = max ( 0 , cs + a [ i ]); if ( cs > ms ){ ms = cs ; e = i ; } } int temp = ms ; s = e ; while ( s >= 0 ){ temp -= a [ s ]; if ( temp == 0 ) break ; s -- ; } cout << \"max sum\" << ms << endl ; for ( int i = s ; i <= e ; i ++ ) cout << a [ i ] << \" \" ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; maxSumSubarray ( a , n ); }","title":"Maximum sum subarray"},{"location":"coding/character-array/character-array/","text":"Introduction \u00b6 Character array stores the characters of fixed size It should be terminated by the null character('\\0') cout<<name-of-char-array> prints the array content unlike int array which prints base address of the array. It uses operator overloading in case of char array char a[]={'a','b','c','d'} : sizeof array is 4. The cout<<a will keep printing characters until it find a null character char a[]=\"abcd\" : sizeof array is 5. The cout<<a will print only abcd Input \u00b6 cin>>a; : it reads the input until it recieved \\n or \\t character. cin.getline(a,100,'\\n') : it reads the input until it recieved the \\n chatracter","title":"Introduction"},{"location":"coding/character-array/character-array/#introduction","text":"Character array stores the characters of fixed size It should be terminated by the null character('\\0') cout<<name-of-char-array> prints the array content unlike int array which prints base address of the array. It uses operator overloading in case of char array char a[]={'a','b','c','d'} : sizeof array is 4. The cout<<a will keep printing characters until it find a null character char a[]=\"abcd\" : sizeof array is 5. The cout<<a will print only abcd","title":"Introduction"},{"location":"coding/character-array/character-array/#input","text":"cin>>a; : it reads the input until it recieved \\n or \\t character. cin.getline(a,100,'\\n') : it reads the input until it recieved the \\n chatracter","title":"Input"},{"location":"coding/character-array/problems/","text":"Problem \u00b6 Palindrome Remove duplicate characters Largest string Palindrome \u00b6 Find whether a character array is palindrome or not View the code #include <bits/stdc++.h> using namespace std ; bool palindrome ( char a [], int l ){ int i = 0 , j = l -1 ; while ( i < j ){ if ( a [ i ] != a [ j ]) return false ; i ++ ; j -- ; } return true ; } int main (){ char a [ 100 ]; cin >> a ; int l = strlen ( a ); cout << palindrome ( a , l ) << endl ; } Remove duplicate characters \u00b6 Remove the consecutive duplicates characters from the character array View the code #include <bits/stdc++.h> using namespace std ; void duplicate ( char a [], int l ){ int i = 0 ; if ( l == 1 || l == 0 ){ return ; } for ( int j = 1 ; j < l ; j ++ ){ if ( a [ i ] != a [ j ]){ a [ ++ i ] = a [ j ]; } } a [ i + 1 ] = '\\0' ; } int main (){ char a [ 100 ]; cin >> a ; int l = strlen ( a ); duplicate ( a , l ); cout << a ; } Largest String \u00b6 Find the largest string among million strings View the code #include <bits/stdc++.h> using namespace std ; int main (){ char a [ 100 ]; char b [ 100 ]; int n , maxlen = 0 ; cin >> n ; cin . get (); while ( n -- ){ cin . getline ( a , 100 ); int l = strlen ( a ); if ( l > maxlen ){ maxlen = l ; strcpy ( b , a ); } } cout << \"string is: \" << b << \" length: \" << maxlen << endl ; }","title":"Problems"},{"location":"coding/character-array/problems/#problem","text":"Palindrome Remove duplicate characters Largest string","title":"Problem"},{"location":"coding/character-array/problems/#palindrome","text":"Find whether a character array is palindrome or not View the code #include <bits/stdc++.h> using namespace std ; bool palindrome ( char a [], int l ){ int i = 0 , j = l -1 ; while ( i < j ){ if ( a [ i ] != a [ j ]) return false ; i ++ ; j -- ; } return true ; } int main (){ char a [ 100 ]; cin >> a ; int l = strlen ( a ); cout << palindrome ( a , l ) << endl ; }","title":"Palindrome"},{"location":"coding/character-array/problems/#remove-duplicate-characters","text":"Remove the consecutive duplicates characters from the character array View the code #include <bits/stdc++.h> using namespace std ; void duplicate ( char a [], int l ){ int i = 0 ; if ( l == 1 || l == 0 ){ return ; } for ( int j = 1 ; j < l ; j ++ ){ if ( a [ i ] != a [ j ]){ a [ ++ i ] = a [ j ]; } } a [ i + 1 ] = '\\0' ; } int main (){ char a [ 100 ]; cin >> a ; int l = strlen ( a ); duplicate ( a , l ); cout << a ; }","title":"Remove duplicate characters"},{"location":"coding/character-array/problems/#largest-string","text":"Find the largest string among million strings View the code #include <bits/stdc++.h> using namespace std ; int main (){ char a [ 100 ]; char b [ 100 ]; int n , maxlen = 0 ; cin >> n ; cin . get (); while ( n -- ){ cin . getline ( a , 100 ); int l = strlen ( a ); if ( l > maxlen ){ maxlen = l ; strcpy ( b , a ); } } cout << \"string is: \" << b << \" length: \" << maxlen << endl ; }","title":"Largest String"},{"location":"coding/string/problems/","text":"Problems \u00b6 string tokeniser sort strings based on column String Tokeniser \u00b6 Design a string tokeniser function View the code #include <bits/stdc++.h> using namespace std ; char * token ( char * arr , char del ){ static char * curr = NULL ; if ( arr != NULL ){ curr = arr ; } if ( curr == NULL ) return NULL ; char * out = new char [ strlen ( curr ) + 1 ]; int i ; for ( i = 0 ; curr [ i ] != '\\0' ; i ++ ){ if ( curr [ i ] != del ){ out [ i ] = curr [ i ]; } else { out [ i ] = '\\0' ; curr += i + 1 ; return out ; } } out [ i ] = '\\0' ; curr = NULL ; return out ; } int main (){ char s [ 100 ] = \"This is a string\" ; char * ptr = token ( s , ' ' ); cout << ( ptr ) << endl ; while ( ptr != NULL ){ ptr = token ( NULL , ' ' ); cout << ptr << endl ; } } sort strings based on column \u00b6 Sort the strings based on following constraints: key : short the string based on some key(column number) ordering : order the string either by numeric comparision or lexicographical comparision reversal : reverse the array if provided as true else keep it in same order View the code #include <bits/stdc++.h> using namespace std ; string getColumn ( string s , int key ){ char * ans = strtok (( char * ) s . c_str (), \" \" ); while ( key > 1 ){ ans = strtok ( NULL , \" \" ); key -- ; } return ( string ) ans ; } int stringToInt ( string a ){ int n = a . length (); int ans = 0 ; int i = 0 , p = 1 ; while ( i < n ){ ans *= p ; ans += ( a [ i ] - '0' ); i ++ ; p *= 10 ; } return ans ; } bool compareNumeric ( pair < string , string > a , pair < string , string > b ){ int key1 = stringToInt ( a . second ); int key2 = stringToInt ( b . second ); return ( key1 < key2 ); } bool compareLexicographically ( pair < string , string > a , pair < string , string > b ){ return ( a . second < b . second ); } int main (){ int n ; cin >> n ; cin . get (); string a [ n ]; for ( int i = 0 ; i < n ; i ++ ){ getline ( cin , a [ i ]); } int key ; string reversal , ordering ; cin >> key >> reversal >> ordering ; pair < string , string > b [ 100 ]; for ( int i = 0 ; i < n ; i ++ ){ b [ i ]. first = a [ i ]; b [ i ]. second = getColumn ( a [ i ], key ); } if ( ordering == \"numeric\" ){ sort ( b , b + n , compareNumeric ); } else { sort ( b , b + n , compareLexicographically ); } if ( reversal == \"false\" ){ for ( int i = 0 ; i < n ; i ++ ) cout << b [ i ]. first << endl ; } else { for ( int i = n -1 ; i >= 0 ; i -- ) cout << b [ i ]. first << endl ; } }","title":"Problems"},{"location":"coding/string/problems/#problems","text":"string tokeniser sort strings based on column","title":"Problems"},{"location":"coding/string/problems/#string-tokeniser","text":"Design a string tokeniser function View the code #include <bits/stdc++.h> using namespace std ; char * token ( char * arr , char del ){ static char * curr = NULL ; if ( arr != NULL ){ curr = arr ; } if ( curr == NULL ) return NULL ; char * out = new char [ strlen ( curr ) + 1 ]; int i ; for ( i = 0 ; curr [ i ] != '\\0' ; i ++ ){ if ( curr [ i ] != del ){ out [ i ] = curr [ i ]; } else { out [ i ] = '\\0' ; curr += i + 1 ; return out ; } } out [ i ] = '\\0' ; curr = NULL ; return out ; } int main (){ char s [ 100 ] = \"This is a string\" ; char * ptr = token ( s , ' ' ); cout << ( ptr ) << endl ; while ( ptr != NULL ){ ptr = token ( NULL , ' ' ); cout << ptr << endl ; } }","title":"String Tokeniser"},{"location":"coding/string/problems/#sort-strings-based-on-column","text":"Sort the strings based on following constraints: key : short the string based on some key(column number) ordering : order the string either by numeric comparision or lexicographical comparision reversal : reverse the array if provided as true else keep it in same order View the code #include <bits/stdc++.h> using namespace std ; string getColumn ( string s , int key ){ char * ans = strtok (( char * ) s . c_str (), \" \" ); while ( key > 1 ){ ans = strtok ( NULL , \" \" ); key -- ; } return ( string ) ans ; } int stringToInt ( string a ){ int n = a . length (); int ans = 0 ; int i = 0 , p = 1 ; while ( i < n ){ ans *= p ; ans += ( a [ i ] - '0' ); i ++ ; p *= 10 ; } return ans ; } bool compareNumeric ( pair < string , string > a , pair < string , string > b ){ int key1 = stringToInt ( a . second ); int key2 = stringToInt ( b . second ); return ( key1 < key2 ); } bool compareLexicographically ( pair < string , string > a , pair < string , string > b ){ return ( a . second < b . second ); } int main (){ int n ; cin >> n ; cin . get (); string a [ n ]; for ( int i = 0 ; i < n ; i ++ ){ getline ( cin , a [ i ]); } int key ; string reversal , ordering ; cin >> key >> reversal >> ordering ; pair < string , string > b [ 100 ]; for ( int i = 0 ; i < n ; i ++ ){ b [ i ]. first = a [ i ]; b [ i ]. second = getColumn ( a [ i ], key ); } if ( ordering == \"numeric\" ){ sort ( b , b + n , compareNumeric ); } else { sort ( b , b + n , compareLexicographically ); } if ( reversal == \"false\" ){ for ( int i = 0 ; i < n ; i ++ ) cout << b [ i ]. first << endl ; } else { for ( int i = n -1 ; i >= 0 ; i -- ) cout << b [ i ]. first << endl ; } }","title":"sort strings based on column"},{"location":"coding/string/string/","text":"Introduction \u00b6 String is a class which holds the character data. It contains constructor, destructor, and function. Which can used to perform CRUD operations. For more details refer Traverse \u00b6 It uses iterator and for each loops to traverse the string view the code string :: iterator itr ; for ( itr = s2 . begin (); itr != s2 . end (); itr ++ ){ cout << ( * itr ) << endl ; } or for ( auto c : s2 ){ cout << c << endl ; } Tokenization \u00b6 Convert the array into token based on a deliminator. View the code #include <bits/stdc++.h> using namespace std ; int main (){ char s [ 100 ] = \"This is a string\" ; char * ptr = strtok ( s , \" \" ); cout << ( ptr ) << endl ; while ( ptr != NULL ){ ptr = strtok ( NULL , \" \" ); cout << ptr << endl ; } }","title":"Introduction"},{"location":"coding/string/string/#introduction","text":"String is a class which holds the character data. It contains constructor, destructor, and function. Which can used to perform CRUD operations. For more details refer","title":"Introduction"},{"location":"coding/string/string/#traverse","text":"It uses iterator and for each loops to traverse the string view the code string :: iterator itr ; for ( itr = s2 . begin (); itr != s2 . end (); itr ++ ){ cout << ( * itr ) << endl ; } or for ( auto c : s2 ){ cout << c << endl ; }","title":"Traverse"},{"location":"coding/string/string/#tokenization","text":"Convert the array into token based on a deliminator. View the code #include <bits/stdc++.h> using namespace std ; int main (){ char s [ 100 ] = \"This is a string\" ; char * ptr = strtok ( s , \" \" ); cout << ( ptr ) << endl ; while ( ptr != NULL ){ ptr = strtok ( NULL , \" \" ); cout << ptr << endl ; } }","title":"Tokenization"},{"location":"concepts/cassandra/contents/","text":"Coming Soon","title":"Cassandra"},{"location":"concepts/git/contents/","text":"Coming Soon","title":"Git"},{"location":"core-subjects/contents/","text":"Coming Soon","title":"Core subjects"},{"location":"system-design/contents/","text":"Coming Soon","title":"System Design"}]}