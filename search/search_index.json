{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coding 2.0 \u00b6 It contains topic-wise notes of the Data Structures & Algo and CKA .","title":"Home"},{"location":"#coding-20","text":"It contains topic-wise notes of the Data Structures & Algo and CKA .","title":"Coding 2.0"},{"location":"about/about/","text":"Coming Soon","title":"About"},{"location":"cka/contents/","text":"Coming Soon","title":"CKA"},{"location":"coding/contents/","text":"Topics \u00b6 Topic Description References Array It contains array problems Here","title":"contents"},{"location":"coding/contents/#topics","text":"Topic Description References Array It contains array problems Here","title":"Topics"},{"location":"coding/array/array/","text":"Introduction \u00b6 Array stores the continuous and homogenous data of the fixed size. It should be declared in the form of <data-type> <name>[<size>] i.e, int arr[10] Initialise \u00b6 int a[10] : It initialises all the array elements with garbage value int a[10]={5} : It initialises the first element by 5 and rest of the elements by 0 int a[10]={5,2} : It initialises the first element by 5, second element by 2, and rest of the elements by 0","title":"Introduction"},{"location":"coding/array/array/#introduction","text":"Array stores the continuous and homogenous data of the fixed size. It should be declared in the form of <data-type> <name>[<size>] i.e, int arr[10]","title":"Introduction"},{"location":"coding/array/array/#initialise","text":"int a[10] : It initialises all the array elements with garbage value int a[10]={5} : It initialises the first element by 5 and rest of the elements by 0 int a[10]={5,2} : It initialises the first element by 5, second element by 2, and rest of the elements by 0","title":"Initialise"},{"location":"coding/array/comparator/comparator/","text":"Comparator \u00b6 Comparator function can be passed inside inbuild sort() function to sort the array based on the condition provided inside comparator function. sort the array based on last digit of each number \u00b6 bool comparator(int a, int b){ return b%10>a%10; } Pass the above function inside sort function. sort(a,a+n,comparator); Function As An Argument \u00b6 Functions can be passed as an argument to another function in cpp. The sort function accepts comparator function as an argument. Using function as an argument to print all the odd numbers present inside the given array View the code // print all the odd numbers in the array #include <bits/stdc++.h> using namespace std ; bool isOdd ( int a ){ return a & 1 ; } void printOddNumbers ( int a [], int n , bool ( & fun )( int a )){ for ( int i = 0 ; i < n ; i ++ ){ if ( fun ( a [ i ])){ cout << a [ i ] << \" \" ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; printOddNumbers ( a , n , isOdd ); }","title":"Comparator"},{"location":"coding/array/comparator/comparator/#comparator","text":"Comparator function can be passed inside inbuild sort() function to sort the array based on the condition provided inside comparator function.","title":"Comparator"},{"location":"coding/array/comparator/comparator/#sort-the-array-based-on-last-digit-of-each-number","text":"bool comparator(int a, int b){ return b%10>a%10; } Pass the above function inside sort function. sort(a,a+n,comparator);","title":"sort the array based on last digit of each number"},{"location":"coding/array/comparator/comparator/#function-as-an-argument","text":"Functions can be passed as an argument to another function in cpp. The sort function accepts comparator function as an argument. Using function as an argument to print all the odd numbers present inside the given array View the code // print all the odd numbers in the array #include <bits/stdc++.h> using namespace std ; bool isOdd ( int a ){ return a & 1 ; } void printOddNumbers ( int a [], int n , bool ( & fun )( int a )){ for ( int i = 0 ; i < n ; i ++ ){ if ( fun ( a [ i ])){ cout << a [ i ] << \" \" ; } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; printOddNumbers ( a , n , isOdd ); }","title":"Function As An Argument"},{"location":"coding/array/searching/searching/","text":"Searching Problems \u00b6 linear search binary search Linear Search \u00b6 View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ for ( int i = 0 ; i < n ; i ++ ){ if ( a [ i ] == x ) return i ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); } Binary Search \u00b6 View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ int s = 0 ; int e = n -1 ; while ( s <= e ){ int m = ( s + e ) / 2 ; if ( a [ m ] == x ) return m ; else if ( a [ m ] > x ) e = m -1 ; else s = m + 1 ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); }","title":"Searching"},{"location":"coding/array/searching/searching/#searching-problems","text":"linear search binary search","title":"Searching Problems"},{"location":"coding/array/searching/searching/#linear-search","text":"View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ for ( int i = 0 ; i < n ; i ++ ){ if ( a [ i ] == x ) return i ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); }","title":"Linear Search"},{"location":"coding/array/searching/searching/#binary-search","text":"View the code #include <bits/stdc++.h> using namespace std ; int search ( int a [], int n , int x ){ int s = 0 ; int e = n -1 ; while ( s <= e ){ int m = ( s + e ) / 2 ; if ( a [ m ] == x ) return m ; else if ( a [ m ] > x ) e = m -1 ; else s = m + 1 ; } return -1 ; } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"enter element to search\" << endl ; int x ; cin >> x ; cout << search ( a , n , x ); }","title":"Binary Search"},{"location":"coding/array/sorting/sorting/","text":"Sorting Problems \u00b6 selection sort bubble sort insertion sort Selection Sort \u00b6 View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int min_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] < a [ min_element ]){ min_element = j ; } } int temp = a [ min_element ]; a [ min_element ] = a [ i ]; a [ i ] = temp ; } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int max_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] > a [ max_element ]){ max_element = j ; } } int temp = a [ max_element ]; a [ max_element ] = a [ i ]; a [ i ] = temp ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; } Bubble Sort \u00b6 View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] > a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] < a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; } Insertion Sort \u00b6 View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] > key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } void desc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] < key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Sorting"},{"location":"coding/array/sorting/sorting/#sorting-problems","text":"selection sort bubble sort insertion sort","title":"Sorting Problems"},{"location":"coding/array/sorting/sorting/#selection-sort","text":"View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int min_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] < a [ min_element ]){ min_element = j ; } } int temp = a [ min_element ]; a [ min_element ] = a [ i ]; a [ i ] = temp ; } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int max_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] > a [ max_element ]){ max_element = j ; } } int temp = a [ max_element ]; a [ max_element ] = a [ i ]; a [ i ] = temp ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Selection Sort"},{"location":"coding/array/sorting/sorting/#bubble-sort","text":"View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] > a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] < a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Bubble Sort"},{"location":"coding/array/sorting/sorting/#insertion-sort","text":"View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] > key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } void desc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] < key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Insertion Sort"},{"location":"concepts/cassandra/contents/","text":"Coming Soon","title":"Cassandra"},{"location":"concepts/git/contents/","text":"Coming Soon","title":"Git"},{"location":"core-subjects/contents/","text":"Coming Soon","title":"Core subjects"},{"location":"system-design/contents/","text":"Coming Soon","title":"System Design"}]}