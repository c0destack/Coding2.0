{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coding 2.0 \u00b6 It contains topic-wise notes of the Data Structures & Algo and CKA .","title":"Home"},{"location":"#coding-20","text":"It contains topic-wise notes of the Data Structures & Algo and CKA .","title":"Coding 2.0"},{"location":"about/about/","text":"About \u00b6 coming soon...","title":"About"},{"location":"about/about/#about","text":"coming soon...","title":"About"},{"location":"cka/contents/","text":"coming soon","title":"CKA"},{"location":"coding/contents/","text":"Table Of Contents \u00b6 Topic Description References Array It contains array problems Here","title":"contents"},{"location":"coding/contents/#table-of-contents","text":"Topic Description References Array It contains array problems Here","title":"Table Of Contents"},{"location":"coding/array/array/","text":"Introduction \u00b6 Array stores the continuous and homogenous data of the fixed size. It should be declared in the form of <data-type> <name>[<size>] i.e, int arr[10] Initialise \u00b6 int a[10] : It initialises all the array elements with garbage value int a[10]={5} : It initialises the first element by 5 and rest of the elements by 0 int a[10]={5,2} : It initialises the first element by 5, second element by 2, and rest of the elements by 0","title":"Introduction"},{"location":"coding/array/array/#introduction","text":"Array stores the continuous and homogenous data of the fixed size. It should be declared in the form of <data-type> <name>[<size>] i.e, int arr[10]","title":"Introduction"},{"location":"coding/array/array/#initialise","text":"int a[10] : It initialises all the array elements with garbage value int a[10]={5} : It initialises the first element by 5 and rest of the elements by 0 int a[10]={5,2} : It initialises the first element by 5, second element by 2, and rest of the elements by 0","title":"Initialise"},{"location":"coding/array/sorting/sorting/","text":"Sorting Problems \u00b6 selection sort bubble sort insertion sort Selection Sort \u00b6 View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int min_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] < a [ min_element ]){ min_element = j ; } } int temp = a [ min_element ]; a [ min_element ] = a [ i ]; a [ i ] = temp ; } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int max_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] > a [ max_element ]){ max_element = j ; } } int temp = a [ max_element ]; a [ max_element ] = a [ i ]; a [ i ] = temp ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; } Bubble Sort \u00b6 View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] > a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] < a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; } Insertion Sort \u00b6 View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] > key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } void desc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] < key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Sorting"},{"location":"coding/array/sorting/sorting/#sorting-problems","text":"selection sort bubble sort insertion sort","title":"Sorting Problems"},{"location":"coding/array/sorting/sorting/#selection-sort","text":"View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int min_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] < a [ min_element ]){ min_element = j ; } } int temp = a [ min_element ]; a [ min_element ] = a [ i ]; a [ i ] = temp ; } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ int max_element = i ; for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] > a [ max_element ]){ max_element = j ; } } int temp = a [ max_element ]; a [ max_element ] = a [ i ]; a [ i ] = temp ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Selection Sort"},{"location":"coding/array/sorting/sorting/#bubble-sort","text":"View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] > a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } void desc ( int a [], int n ){ for ( int i = 0 ; i < n -1 ; i ++ ){ for ( int j = 0 ; j < n - i -1 ; j ++ ){ if ( a [ j ] < a [ j + 1 ]){ int temp = a [ j ]; a [ j ] = a [ j + 1 ]; a [ j + 1 ] = temp ; } } } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Bubble Sort"},{"location":"coding/array/sorting/sorting/#insertion-sort","text":"View the code #include <bits/stdc++.h> using namespace std ; void asc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] > key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } void desc ( int a [], int n ){ for ( int i = 1 ; i <= n -1 ; i ++ ){ int j = i -1 ; int key = a [ i ]; while ( j >= 0 && a [ j ] < key ){ a [ j + 1 ] = a [ j ]; j -- ; } a [ j + 1 ] = key ; } } int main (){ int n ; cout << \"enter size\" << endl ; cin >> n ; int a [ n ]; cout << \"enter \" << n << \" elements\" << endl ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; cout << \"input 1 for asc order\" << endl << \"enter 2 for desc order\" << endl ; int x ; cin >> x ; if ( x == 1 ){ asc ( a , n ); } else { desc ( a , n ); } for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \" ; }","title":"Insertion Sort"}]}